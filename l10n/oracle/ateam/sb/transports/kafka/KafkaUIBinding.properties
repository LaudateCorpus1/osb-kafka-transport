# General Strings for the UI
PROXY_URI_FORMAT=host1:port,host2:port
BUSINESS_URI_FORMAT=host:port
TOPIC_NAME_LABEL=Topic Name
TOPIC_NAME_DESC=The name of the topic(s).
CUSTOM_PROPS_LABEL=Custom Properties
CUSTOM_PROPS_LABEL_CONSUMER=Consumer Configs
CUSTOM_PROPS_LABEL_PRODUCER=Producer Configs
CUSTOM_PROPS_DESC=Comma-separated list of properties in the key=value format. Use this field to specify any property that does not have an equivalent in this user interface.

# UI Fields (Inbound)
CONSUMER_THREADS_LABEL=Consumer Threads
CONSUMER_THREADS_DESC=The number of concurrent threads used to fetch messages from the topic(s). Each thread will create a internal consumer that binds to an available partition.
GROUP_ID_LABEL=Group Identifier
GROUP_ID_DESC=A unique string that identifies the consumer group this consumer belongs to. Using the same group identifier for multiple processes creates a cluster of consumers that works in a load balancing fashion. This is the UI equivalent to the 'group.id' property.
PARTITION_ASSIGNMENT_STRATEGY_LABEL=Partition Assignment Strategy
PARTITION_ASSIGNMENT_STRATEGY_DESC=Select between the 'range' or 'roundrobin' strategy for assigning partitions to consumer streams.
SOCKET_TIMEOUT_MS_LABEL=Socket Timeout
SOCKET_TIMEOUT_MS_DESC=The socket timeout, in milliseconds, for network requests.
SOCKET_RECEIVE_BUFFER_BYTES_LABEL=Socket Receive Buffer Bytes
SOCKET_RECEIVE_BUFFER_BYTES_DESC=The socket receive buffer, in bytes, for network requests.
FETCH_MESSAGE_MAX_BYTES_LABEL=Maximum Fetch Message Bytes
FETCH_MESSAGE_MAX_BYTES_DESC=The number of bytes of messages to attempt to fetch for each topic-partition in each fetch request. These bytes will be read into memory for each partition, so this helps control the memory used by the consumer. The fetch request size must be at least as large as the maximum message size the server allows or else it is possible for the producer to send messages larger than the consumer can fetch.
NUM_CONSUMER_FETCHERS_LABEL=Number of Consumer Fetchers
NUM_CONSUMER_FETCHERS_DESC=The number of fetcher threads used to fetch data.
AUTO_COMMIT_ENABLE_LABEL=Auto Commit Enable
AUTO_COMMIT_ENABLE_DESC=If true, periodically commit to ZooKeeper the offset of messages already fetched by the consumer. This committed offset will be used when the process fails as the position from which the new consumer will begin.
AUTO_COMMIT_INTERVAL_MS_LABEL=Auto Commit Interval
AUTO_COMMIT_INTERVAL_MS_DESC=The frequency in milliseconds that the consumer offsets are committed to zookeeper.
QUEUED_MAX_MESSAGE_CHUNKS_LABEL=Maximum Queued Message Chunks
QUEUED_MAX_MESSAGE_CHUNKS_DESC=Max number of message chunks buffered for consumption.
REBALANCE_MAX_RETRIES_LABEL=Maximum Rebalance Retries
REBALANCE_MAX_RETRIES_DESC=When a new consumer joins a consumer group the set of consumers attempt to 'rebalance' the load to assign partitions to each consumer. If the set of consumers changes while this assignment is taking place the rebalance will fail and retry. This setting controls the maximum number of attempts before giving up.
FETCH_MIN_BYTES_LABEL=Minimum Fetch Bytes
FETCH_MIN_BYTES_DESC=The minimum amount of data, in bytes, the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request.
FETCH_WAIT_MAX_MS_LABEL=Maximum Fetch Wait
FETCH_WAIT_MAX_MS_DESC=The maximum amount of time, in milliseconds, the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy minimum fetch bytes.
REBALANCE_BACKOFF_MS_LABEL=Rebalance Backoff
REBALANCE_BACKOFF_MS_DESC=Backoff time, in milliseconds, between retries during rebalance.
REFRESH_LEADER_BACKOFF_MS_LABEL=Refresh Leader Backoff
REFRESH_LEADER_BACKOFF_MS_DESC=Backoff time, in milliseconds, to wait before trying to determine the leader of a partition that has just lost its leader.
AUTO_OFFSET_RESET_LABEL=Auto Offset Reset
AUTO_OFFSET_RESET_DESC=What to do when there is no initial offset in ZooKeeper or if an offset is out of range.
CONSUMER_TIMEOUT_MS_LABEL=Consumer Timeout
CONSUMER_TIMEOUT_MS_DESC=Throw a timeout exception to the consumer if no message is available for consumption after the specified interval in milliseconds.
EXCLUDE_INTERNAL_TOPICS_LABEL=Exclude Internal Topics
EXCLUDE_INTERNAL_TOPICS_DESC=Whether messages from internal topics (such as offsets) should be exposed to the consumer.
ZOOKEEPER_SESSION_TIMEOUT_MS_LABEL=Zookeeper Session Timeout
ZOOKEEPER_SESSION_TIMEOUT_MS_DESC=ZooKeeper session timeout in milliseconds. If the consumer fails to heartbeat to ZooKeeper for this period of time it is considered dead and a rebalance will occur.
ZOOKEEPER_CONNECTION_TIMEOUT_MS_LABEL=Zookeeper Connection Timeout
ZOOKEEPER_CONNECTION_TIMEOUT_MS_DESC=The max time, in milliseconds, that the client waits while establishing a connection to Zookeeper.
ZOOKEEPER_SYNC_TIME_MS_LABEL=Zookeeper Sync Time
ZOOKEEPER_SYNC_TIME_MS_DESC=How far, in milliseconds, a ZK follower can be behind a ZK leader.
OFFSETS_STORAGE_LABEL=Offsets Storage
OFFSETS_STORAGE_DESC=Select where offsets should be stored, if is in Zookeeper or Kafka.
OFFSETS_CHANNEL_BACKOFF_MS_LABEL=Offsets Channel Backoff
OFFSETS_CHANNEL_BACKOFF_MS_DESC=The backoff period, in milliseconds, when reconnecting the offsets channel or retrying failed offset fetch/commit requests.
OFFSETS_CHANNEL_SOCKET_TIMEOUT_MS_LABEL=Offsets Channel Socket Timeout
OFFSETS_CHANNEL_SOCKET_TIMEOUT_MS_DESC=Socket timeout, in milliseconds, when reading responses for offset fetch/commit requests. This timeout is also used for ConsumerMetadata requests that are used to query for the offset manager.
OFFSETS_COMMIT_MAX_RETRIES_LABEL=Maximum Offset Commit Retries
OFFSETS_COMMIT_MAX_RETRIES_DESC=Retry the offset commit up to this many times on failure. This retry count only applies to offset commits during shut-down. It does not apply to commits originating from the auto-commit thread. It also does not apply to attempts to query for the offset coordinator before committing offsets. i.e., if a consumer metadata request fails for any reason, it will be retried and that retry does not count toward this limit.
DUAL_COMMIT_ENABLED_LABEL=Dual Commit Enabled
DUAL_COMMIT_ENABLED_DESC=If you are using 'kafka' as offsets storage, you can dual commit offsets to ZooKeeper (in addition to Kafka). This is required during migration from Zookeeper-based offset storage to Kafka-based offset storage. With respect to any given consumer group, it is safe to turn this off after all instances within that group have been migrated to the new version that commits offsets to the broker (instead of directly to ZooKeeper).

# UI Fields (Outbound)
ACKS_LABEL=Acknowledge
ACKS_DESC=The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. The 'Without Acknowledge'option specifies that the record will be immediately added to the socket buffer and considered sent. The 'Leader Acknowledge' option specifies that the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. The 'ISRs Acknowledge' option specifies that the leader will wait for the full set of in-sync replicas to acknowledge the record. This is the UI equivalent to the 'acks' property.
TIMEOUT_MS_LABEL=Request Timeout
TIMEOUT_MS_DESC=The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted. This is the UI equivalent of the property 'request.timeout.ms' property.
BUFFER_MEMORY_LABEL=Buffer Memory
BUFFER_MEMORY_DESC=The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will either block or throw an exception based on the preference specified by block on buffer full.
COMPRESSION_TYPE_LABEL=Compression Type
COMPRESSION_TYPE_DESC=The compression type for all data generated by the producer. Valid values are none, gzip, or snappy. Compression is of full batches of data, so the efficacy of batching will also impact the compression ratio (more batching means better compression).
BATCH_SIZE_LABEL=Batch Size
BATCH_SIZE_DESC=The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server. This configuration controls the default batch size in bytes.
LINGER_MS_LABEL=Linger
LINGER_MS_DESC=The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delay. Set this value to zero to no delay.
MAX_REQUEST_SIZE_LABEL=Maximum Request Size
MAX_REQUEST_SIZE_DESC=The maximum size of a request. This is also effectively a cap on the maximum record size. Note that the server has its own cap on record size which may be different from this. This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
RECEIVE_BUFFER_BYTES_LABEL=Receive Buffer Bytes
RECEIVE_BUFFER_BYTES_DESC=The size of the TCP receive buffer to use when reading data.
SEND_BUFFER_BYTES_LABEL=Send Buffer Bytes
SEND_BUFFER_BYTES_DESC=The size of the TCP send buffer to use when sending data.
BLOCK_ON_BUFFER_FULL_LABEL=Block On Buffer Full
BLOCK_ON_BUFFER_FULL_DESC=When our memory buffer is exhausted we must either stop accepting new records (block) or throw errors. By default this setting is true and we block, however in some scenarios blocking is not desirable and it is better to immediately give an error. Setting this to false will accomplish that: the producer will throw a BufferExhaustedException if a record is sent and the buffer space is full.
METADATA_FETCH_TIMEOUT_MS_LABEL=Metadata Fetch Timeout
METADATA_FETCH_TIMEOUT_MS_DESC=The first time data is sent to a topic we must fetch metadata about that topic to know which servers host the topic's partitions. This configuration controls the maximum amount of time we will block waiting for the metadata fetch to succeed before throwing an exception back to the client.
METADATA_MAX_AGE_MS_LABEL=Maximum Metadata Age
METADATA_MAX_AGE_MS_DESC=The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.
RECONNECT_BACKOFF_MS_LABEL=Reconnect Backoff
RECONNECT_BACKOFF_MS_DESC=The amount of time to wait before attempting to reconnect to a given host when a connection fails. This avoids a scenario where the client repeatedly attempts to connect to a host in a tight loop.
CLIENT_ID_LABEL=Client Identifier
CLIENT_ID_DESC=The string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included with the request.

# Validation Error Messages
INVALID_LOAD_BALANCING=Load balancing is managed by Kafka. Therefore, the load balancing algorithm option must be set to 'None'.
ENDPOINT_INFO_MISSING=The endpoint information about Kafka is missing.
ENDPOINT_INCORRECT=One of the endpoints has an invalid URI format.
NUMBER_THREADS_INVALID=The number of threads must be greater than or equals to one.
TIMEOUT_INVALID=The request timeout must be greater than or equals to one.
